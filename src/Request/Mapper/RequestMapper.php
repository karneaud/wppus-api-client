<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Wppus\Client\Request\Mapper;

use Http\Discovery\Psr17FactoryDiscovery;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface as PsrRequestInterface;
use Wppus\Client\Request\CookieJar;
use Wppus\Client\Request\RequestInterface;
use Wppus\Client\Serializer\BodySerializer;
use Wppus\Client\Serializer\QuerySerializer;

class RequestMapper implements RequestMapperInterface
{
    private BodySerializer $bodySerializer;
    private QuerySerializer $querySerializer;
    private RequestFactoryInterface $requestFactory;

    public function __construct(
        BodySerializer $bodySerializer,
        QuerySerializer $querySerializer,
        RequestFactoryInterface $requestFactory = null
    ) {
        $this->bodySerializer  = $bodySerializer;
        $this->querySerializer = $querySerializer;

        // Use the factory provided, or discover one if none is provided
        $this->requestFactory = $requestFactory ?: Psr17FactoryDiscovery::findRequestFactory();
    }

    public function map(RequestInterface $request, string $url = ''): PsrRequestInterface
    {
        $body = $this->bodySerializer->serializeRequest($request);
        $query = $this->querySerializer->serializeRequest($request);
        // Create the request dynamically via the PSR-17 factory
        $psr7Request = $this->requestFactory->createRequest($request->getMethod(), $url . $request->getRoute())
            ->withBody($this->requestFactory->createStream($body));
        if(method_exists($psr7Request,'withHeaders')) $psr7Request = $psr7Request->withHeaders($request->getHeaders());
        else {
            foreach($request->getHeaders() as $key => $value) $psr7Request = $psr7Request->withHeader($key , $value );
        }

        // Add the query to the URI
        $psr7Request = $psr7Request->withUri($psr7Request->getUri()->withQuery($query));

        // Optionally handle cookies
        $cookieJar = new CookieJar($request->getCookies());
        $psr7Request = $cookieJar->withCookieHeader($psr7Request);

        return $psr7Request;
    }
}
